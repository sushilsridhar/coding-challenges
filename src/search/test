// write your code here...
you will be given with array and you need to count number of smaller elements on right after self
//no duplicate elelments
e.g. nums= [5,2,6,1]
   ans = [2,1,1,0]

Input: nums = [4,5,6,7,0,1,2], target = 5
Output: 4

n -> travrsal

   [4,5,6,7] -> num = 5 -> log(n)
   n + log(n) ~ o(n)
 sorted array = [1,2,6] -> use binary search

 {
     ArrayList<Integer> list = new ArrayList<>();
     int[] ans = new int[nums.length];

     for(int i=nums.length-1; i>=0; i--) {
         int index = findPosition(list, nums[i]);
         list.add(index, num);
         ans[i] = index;
     }

    return ans;

 }

[1,2,4,8]
Collections.bianrySearch(sorted, num)
num = 4 ans = 2
num =5 ans = -3

Arrays.biansrySearch()

[1,2,4,4,4,5]
num = 4 (2/3/4)
private int findPosition(ArrayList<Integer> sorted, int num) {

    int left=0, right = sorted.length()-1;

    while(left<=right) {
        int center = (left+right)/2;
        left + (right - left)/ 2 (https://medium.com/swlh/overflow-bug-in-binary-search-c4d4a824807a)
        //left = 4294967290 right = 33 mid = 13
        if(num > sorted.get(center)) {
            left = mid + 1;
        } else if(num < sorted.get(center)) {
            right = mid - 1;
        }
    }
    return left;
}
[4,5,6,7,0,1,2], target = 2
 0 1 2 3 4 5 6
start =0 end =6 , m= 3
mid = nums[3] = 7
s= 4, e =6, m =5
s = 6 , e 6, m =6

[4,5,6,0,1,2,3,4,5] target = 0
 0 1 2 3 4 5 6 7 8

 s = 0 e = 8, m = 4
 s= 0 e = 3,  m = 1
 s= 2 ,e =3 , m = 2
 s= 3, e =3 , m =3

 start = 0 , end = nums.length-1;
 while(start <= end) {
     mid = start + (end-start)/2;
     if(nums[mid] == target) {
         return mid;
     } else if(nums[start] <= nums[mid]) {
         if(target >=nums[start] && target < nums[mid]) {
            end = mid-1;
        } else {
            start=mid+1;
        }
     } else {
         if(target >= nums[start] || target < nums[mid]) {
            end = mid-1;
        } else {
            start=mid+1;
        }
     }
 }


 First solution = o(logn) + o(logn)
 Solution = o(logn)
